#!/bin/sh -e
### BEGIN INIT INFO
# Provides:   resque
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $local_fs
# Should-Stop:    $local_fs
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:  resque - a Redis-backed Ruby library for creating background jobs
# Description:    resque - a Redis-backed Ruby library for creating background jobs, placing those jobs on multiple queues, and processing them later.
# NOTE: Stolen from the examples directory with resque (https://raw.github.com/defunkt/resque/master/examples/ubuntu/resque)
### END INIT INFO

set -e

. /lib/lsb/init-functions

NAME="<%= node[:fqdn] %>"
ROOT="<%= node[:resque_tng][:app_dir] %>"
USER="<%= node[:resque_tng][:owner] %>"
GROUP="<%= node[:resque_tng][:group] %>"
ENVIRONMENT="<%= node[:resque_tng][:environment] %>"
QUEUES="<%= node[:resque_tng][:queues] %>"
COUNT=<%= node[:resque_tng][:worker_count] %>

BUNDLER="<%= node[:resque_tng][:bundler_exec] %>"
RAKE="<%= node[:resque_tng][:rake_exec] %>"
TASK="<%= node[:resque_tng][:rake_task] %>"
PIDFILE="$ROOT/tmp/pids/resque_worker.%d.pid"

start() {
  local program
  local options

  if test -f $ROOT/Gemfile.lock; then
    program="$BUNDLER"
    options="exec rake $TASK"
  else
    program="$RAKE"
    options="$TASK"
  fi

  options="$options RACK_ENV=$ENVIRONMENT RAILS_ENV=$ENVIRONMENT QUEUES=$QUEUES"

  for i in $(seq 1 $COUNT); do
    pidfile=$(printf "$PIDFILE" $i)

    if start-stop-daemon --start --background --quiet --pidfile $pidfile --chdir $ROOT --chuid $USER:$GROUP --exec $program -- $options PIDFILE=$pidfile
    then
      log_daemon_msg "Starting worker #$i for $NAME ..."
    else
      log_failure_msg "Failed to start worker #$i for $NAME!"
    fi
  done
}

stop() {
  local pidfile

  for i in $(seq 1 $COUNT); do
    pidfile=$(printf "$PIDFILE" $i)

    if start-stop-daemon --stop --quiet --oknodo --pidfile $pidfile
    then
      log_daemon_msg "Stopped Resque worker #$i for $NAME"
      rm -f $pidfile
    else
      log_failure_msg "Failed to stop Resque worker #$i for $NAME!" >&2
    fi
  done
}

status() {
  local pidfile

  for i in $(seq 1 $COUNT); do
    pidfile=$(printf "$PIDFILE" $i)

    status_of_proc -p $pidfile "rake $TASK" "$NAME worker #$i"
  done
}

case "$1" in
  start)  start ;;
  stop) stop ;;
  restart|force-reload)
    stop
    sleep 1
    start
    ;;
  status) status ;;
  *)
    echo "Usage: $0 {start|stop|restart|force-reload|status}" >&2
    exit 1
    ;;
esac
